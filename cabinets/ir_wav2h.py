#!/usr/local/bin/python -u
import os
from pysndfile import PySndfile
from optparse import OptionParser

parser = OptionParser(usage="Usage: %prog [options]")
parser.add_option("-i", dest="infile", help="Input file name")
parser.add_option("-o", dest="outfile", help="Output file name")
(opts, args) = parser.parse_args()

if opts.infile == None or opts.outfile == None:
    parser.print_help()
    exit(1)

if not os.path.isfile(opts.infile):
    print "Error: {} does not exists".format(opts.infile)
    exit(1)

wav = PySndfile(opts.infile)

parts = opts.infile.split("/")
filename = parts[-1]
name = filename.replace(".wav", "").replace("-", "_").replace(".", "_")
mic = parts[-2].replace("-", "_").replace(" ", "_")
vendor = parts[-3].replace("-", "_").replace(" ", "_")
nsname = vendor + "_" + mic + "_" + name

outfile = vendor + "_" + mic + "_" + opts.outfile
print "Creating {} ...".format(outfile)

with open(outfile, "w") as f:
    f.write("/// Impulse response header, generated by ir_wav2h.py\n")
    f.write("/// Input file: {}\n\n".format(filename))
    f.write("#ifndef IR_{}_H\n#define IR_{}_H\n\n".format(nsname.upper(), nsname.upper()))
    f.write("#include <vector>\n\n".format(nsname))
    f.write("namespace {} {{\n\n".format(nsname))
    f.write("static const char* name = \"{}\";\n".format(name))
    f.write("static const char* vendor = \"{}\";\n".format(vendor.replace("_", " ")))
    f.write("static const char* mic = \"{}\";\n".format(mic.replace("_", " ")))
    f.write("static int samplerate =  {};\n\n".format(wav.samplerate()))
    f.write("static std::vector<double> frames = {{\n".format(nsname))
    first = True
    i = 0
    for s in wav.read_frames():
        if first:
            first = False
            f.write("    ")
        else:
            if i % 6 == 0:
                f.write(",\n    ")
            else:
                f.write(", ")
        f.write(str(s))
        i = i + 1

    f.write("\n};  // frames\n\n")
    f.write("int __init__ = add_ir(name, vendor, mic, frames, samplerate);\n\n")
    f.write("}}   // {}\n\n".format(nsname))
    f.write("#endif\n")
    f.close()
